name: GitOps

###
# GitOps - automatic infrastructure management GitHub Action
#
# See https://github.com/microsoft/NubesGen/blob/main/docs/gitops-overview.md
# for more information about using GitOps with NubesGen.
###

on:
  push:
    branches:
      - main

env:
  APPLICATION_NAME: 'j4kdemo'
  CONTAINER_REGISTRY: 'sakriemaj4kdemo'
  NAMESPACE: 'development'
  ENVIRONMENT: 'sakriema'

jobs:
  build-and-deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build with Docker
        run: |
          mvn package -Pprod -DskipTests jib:dockerBuild -Dimage=acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io/${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_NAME }}:${{ github.sha }}
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Push to Azure Container Registry
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          az acr login -n acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io
          docker push acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io/${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_NAME }}:${{ github.sha }}

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: 'aks-${{ env.APPLICATION_NAME }}${{ env.ENVIRONMENT }}-001'
          resource-group: 'rg-${{ env.APPLICATION_NAME }}${{ env.ENVIRONMENT }}-001'

      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}-image-pull-secret
          namespace: ${{ env.NAMESPACE }}
          force: true

      - uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-type: 'generic'
          arguments: --from-literal=SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD }}
          secret-name: datasource-credentials

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/deployment.yml
            manifests/service.yml
          images: |
            acr${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}001.azurecr.io/${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.CONTAINER_REGISTRY }}${{ env.ENVIRONMENT }}-image-pull-secret
          namespace: ${{ env.NAMESPACE }}
